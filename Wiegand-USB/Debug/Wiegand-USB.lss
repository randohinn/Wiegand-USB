
Wiegand-USB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  0000037e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ba  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  00000cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039a  00000000  00000000  0000140d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  000017a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ce  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001bf  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	4d c0       	rjmp	.+154    	; 0xa6 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
  22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
  24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>
  26:	16 c0       	rjmp	.+44     	; 0x54 <__bad_interrupt>
  28:	15 c0       	rjmp	.+42     	; 0x54 <__bad_interrupt>
  2a:	14 c0       	rjmp	.+40     	; 0x54 <__bad_interrupt>
  2c:	13 c0       	rjmp	.+38     	; 0x54 <__bad_interrupt>
  2e:	12 c0       	rjmp	.+36     	; 0x54 <__bad_interrupt>
  30:	11 c0       	rjmp	.+34     	; 0x54 <__bad_interrupt>
  32:	10 c0       	rjmp	.+32     	; 0x54 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 30       	cpi	r26, 0x06	; 6
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	93 d0       	rcall	.+294    	; 0x178 <main>
  52:	59 c1       	rjmp	.+690    	; 0x306 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <serial_send>:
#define BAUD 9600

volatile unsigned long data = 0;
volatile int dataCount = 0;

void serial_send(char* ar) {
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	ec 01       	movw	r28, r24
  5c:	ac 01       	movw	r20, r24
	for (int i = 0; i < strlen(ar); i++){
  5e:	20 e0       	ldi	r18, 0x00	; 0
  60:	30 e0       	ldi	r19, 0x00	; 0
		while (( UCSR0A & (1<<UDRE0))  == 0){};
  62:	e0 ec       	ldi	r30, 0xC0	; 192
  64:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_ms(1);
		UDR0 = ar[i];
  66:	66 ec       	ldi	r22, 0xC6	; 198
  68:	70 e0       	ldi	r23, 0x00	; 0

volatile unsigned long data = 0;
volatile int dataCount = 0;

void serial_send(char* ar) {
	for (int i = 0; i < strlen(ar); i++){
  6a:	10 c0       	rjmp	.+32     	; 0x8c <serial_send+0x36>
		while (( UCSR0A & (1<<UDRE0))  == 0){};
  6c:	90 81       	ld	r25, Z
  6e:	95 ff       	sbrs	r25, 5
  70:	fd cf       	rjmp	.-6      	; 0x6c <serial_send+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f ec       	ldi	r24, 0xCF	; 207
  74:	97 e0       	ldi	r25, 0x07	; 7
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <serial_send+0x20>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <serial_send+0x26>
  7c:	00 00       	nop
		_delay_ms(1);
		UDR0 = ar[i];
  7e:	da 01       	movw	r26, r20
  80:	8d 91       	ld	r24, X+
  82:	ad 01       	movw	r20, r26
  84:	db 01       	movw	r26, r22
  86:	8c 93       	st	X, r24

volatile unsigned long data = 0;
volatile int dataCount = 0;

void serial_send(char* ar) {
	for (int i = 0; i < strlen(ar); i++){
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	de 01       	movw	r26, r28
  8e:	0d 90       	ld	r0, X+
  90:	00 20       	and	r0, r0
  92:	e9 f7       	brne	.-6      	; 0x8e <serial_send+0x38>
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	ac 1b       	sub	r26, r28
  98:	bd 0b       	sbc	r27, r29
  9a:	2a 17       	cp	r18, r26
  9c:	3b 07       	cpc	r19, r27
  9e:	30 f3       	brcs	.-52     	; 0x6c <serial_send+0x16>
		while (( UCSR0A & (1<<UDRE0))  == 0){};
		_delay_ms(1);
		UDR0 = ar[i];
	}
}
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <__vector_5>:


ISR(PCINT2_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
	if(!(PIND & (1<<PIND6))) {
  b8:	4e 99       	sbic	0x09, 6	; 9
  ba:	1d c0       	rjmp	.+58     	; 0xf6 <__vector_5+0x50>
		data = data << 1;
  bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
  c0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <data+0x1>
  c4:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <data+0x2>
  c8:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <data+0x3>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data>
  d8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <data+0x1>
  dc:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <data+0x2>
  e0:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <data+0x3>
		dataCount++;
  e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	} 
	if(!(PIND & (1<<PIND7))) {
  f6:	4f 99       	sbic	0x09, 7	; 9
  f8:	30 c0       	rjmp	.+96     	; 0x15a <__vector_5+0xb4>
		 data = data << 1;
  fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
  fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <data+0x1>
 102:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <data+0x2>
 106:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <data+0x3>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	aa 1f       	adc	r26, r26
 110:	bb 1f       	adc	r27, r27
 112:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data>
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <data+0x1>
 11a:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <data+0x2>
 11e:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <data+0x3>
		 data = data + 0x01;
 122:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <data>
 126:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <data+0x1>
 12a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <data+0x2>
 12e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <data+0x3>
 132:	01 96       	adiw	r24, 0x01	; 1
 134:	a1 1d       	adc	r26, r1
 136:	b1 1d       	adc	r27, r1
 138:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <data>
 13c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <data+0x1>
 140:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <data+0x2>
 144:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <data+0x3>
		 dataCount++;
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 156:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 15a:	8f ec       	ldi	r24, 0xCF	; 207
 15c:	97 e0       	ldi	r25, 0x07	; 7
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <__vector_5+0xb8>
 162:	00 c0       	rjmp	.+0      	; 0x164 <__vector_5+0xbe>
 164:	00 00       	nop
	}
	_delay_ms(1);
}
 166:	bf 91       	pop	r27
 168:	af 91       	pop	r26
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:

int main(void)
{
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
 180:	a1 97       	sbiw	r28, 0x21	; 33
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
	CLKPR=128;
 18c:	e1 e6       	ldi	r30, 0x61	; 97
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
	CLKPR=0;
 194:	10 82       	st	Z, r1
	DDRD |= (1 << PIND1);
 196:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1 << PIND0);
 198:	50 98       	cbi	0x0a, 0	; 10

	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);   // Turn on the transmission and reception circuitry
 19a:	e1 ec       	ldi	r30, 0xC1	; 193
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 61       	ori	r24, 0x18	; 24
 1a2:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00) | (1 << UCSZ01); // Use 8-bit character sizes
 1a4:	e2 ec       	ldi	r30, 0xC2	; 194
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	86 60       	ori	r24, 0x06	; 6
 1ac:	80 83       	st	Z, r24

	UBRR0H = 0;
 1ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
	UBRR0L=54;
 1b2:	86 e3       	ldi	r24, 0x36	; 54
 1b4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
	
	DDRC |= (1 << DDC3);
 1b8:	3b 9a       	sbi	0x07, 3	; 7
	DDRC |= (1 << DDC0);
 1ba:	38 9a       	sbi	0x07, 0	; 7
	DDRB &= (1 << DDB0);
 1bc:	84 b1       	in	r24, 0x04	; 4
 1be:	81 70       	andi	r24, 0x01	; 1
 1c0:	84 b9       	out	0x04, r24	; 4

	
	DDRD &= ~(1 << DDD6);
 1c2:	56 98       	cbi	0x0a, 6	; 10
	DDRD &= ~(1 << DDD7);
 1c4:	57 98       	cbi	0x0a, 7	; 10
	
	PCMSK2 |= (1<<PCINT22) | (1<<PCINT23);
 1c6:	ed e6       	ldi	r30, 0x6D	; 109
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 6c       	ori	r24, 0xC0	; 192
 1ce:	80 83       	st	Z, r24

	PCICR |= (1<<PCIE2);
 1d0:	e8 e6       	ldi	r30, 0x68	; 104
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	84 60       	ori	r24, 0x04	; 4
 1d8:	80 83       	st	Z, r24
	
	sei();
 1da:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
	
		if(PINB & (1<<PINB0)) { //26 bit
 1dc:	18 9b       	sbis	0x03, 0	; 3
 1de:	25 c0       	rjmp	.+74     	; 0x22a <main+0xb2>
							PORTC &= ~(1<< PORTC3);
 1e0:	43 98       	cbi	0x08, 3	; 8

			if(dataCount == 26) {
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ea:	4a 97       	sbiw	r24, 0x1a	; 26
 1ec:	b9 f7       	brne	.-18     	; 0x1dc <main+0x64>

				char buffer[8 * sizeof (long int) + 1 ];
				ltoa(data, buffer, 2);
 1ee:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <data>
 1f2:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <data+0x1>
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data+0x2>
 1fa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <data+0x3>
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	ae 01       	movw	r20, r28
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	35 d0       	rcall	.+106    	; 0x274 <ltoa>
				serial_send(buffer);
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	23 df       	rcall	.-442    	; 0x56 <serial_send>
				data = 0;
 210:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <data>
 214:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <data+0x1>
 218:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <data+0x2>
 21c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data+0x3>
				dataCount = 0;
 220:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 224:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 228:	d9 cf       	rjmp	.-78     	; 0x1dc <main+0x64>
			}
		} else {  // 34bit
							PORTC |= (1<< PORTC3);
 22a:	43 9a       	sbi	0x08, 3	; 8

			if(dataCount == 34) {
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 234:	82 97       	sbiw	r24, 0x22	; 34
 236:	91 f6       	brne	.-92     	; 0x1dc <main+0x64>
				char buffer[8 * sizeof (long int) + 1 ];
				ltoa(data, buffer, 2);
 238:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <data>
 23c:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <data+0x1>
 240:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <data+0x2>
 244:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <data+0x3>
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	ae 01       	movw	r20, r28
 24e:	4f 5f       	subi	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	10 d0       	rcall	.+32     	; 0x274 <ltoa>
				serial_send(buffer);
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	fe de       	rcall	.-516    	; 0x56 <serial_send>
				data = 0;
 25a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <data>
 25e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <data+0x1>
 262:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <data+0x2>
 266:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <data+0x3>
				dataCount = 0;
 26a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 26e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 272:	b4 cf       	rjmp	.-152    	; 0x1dc <main+0x64>

00000274 <ltoa>:
 274:	25 32       	cpi	r18, 0x25	; 37
 276:	31 05       	cpc	r19, r1
 278:	18 f4       	brcc	.+6      	; 0x280 <ltoa+0xc>
 27a:	22 30       	cpi	r18, 0x02	; 2
 27c:	08 f0       	brcs	.+2      	; 0x280 <ltoa+0xc>
 27e:	04 c0       	rjmp	.+8      	; 0x288 <__ltoa_ncheck>
 280:	fa 01       	movw	r30, r20
 282:	10 82       	st	Z, r1
 284:	ca 01       	movw	r24, r20
 286:	08 95       	ret

00000288 <__ltoa_ncheck>:
 288:	bb 27       	eor	r27, r27
 28a:	2a 30       	cpi	r18, 0x0A	; 10
 28c:	51 f4       	brne	.+20     	; 0x2a2 <__ltoa_ncheck+0x1a>
 28e:	99 23       	and	r25, r25
 290:	42 f4       	brpl	.+16     	; 0x2a2 <__ltoa_ncheck+0x1a>
 292:	bd e2       	ldi	r27, 0x2D	; 45
 294:	90 95       	com	r25
 296:	80 95       	com	r24
 298:	70 95       	com	r23
 29a:	61 95       	neg	r22
 29c:	7f 4f       	sbci	r23, 0xFF	; 255
 29e:	8f 4f       	sbci	r24, 0xFF	; 255
 2a0:	9f 4f       	sbci	r25, 0xFF	; 255
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <__ultoa_common>

000002a4 <__ultoa_ncheck>:
 2a4:	bb 27       	eor	r27, r27

000002a6 <__ultoa_common>:
 2a6:	fa 01       	movw	r30, r20
 2a8:	a6 2f       	mov	r26, r22
 2aa:	62 17       	cp	r22, r18
 2ac:	71 05       	cpc	r23, r1
 2ae:	81 05       	cpc	r24, r1
 2b0:	91 05       	cpc	r25, r1
 2b2:	33 0b       	sbc	r19, r19
 2b4:	30 fb       	bst	r19, 0
 2b6:	66 f0       	brts	.+24     	; 0x2d0 <__ultoa_common+0x2a>
 2b8:	aa 27       	eor	r26, r26
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	aa 1f       	adc	r26, r26
 2c4:	a2 17       	cp	r26, r18
 2c6:	10 f0       	brcs	.+4      	; 0x2cc <__ultoa_common+0x26>
 2c8:	a2 1b       	sub	r26, r18
 2ca:	63 95       	inc	r22
 2cc:	38 50       	subi	r19, 0x08	; 8
 2ce:	a9 f7       	brne	.-22     	; 0x2ba <__ultoa_common+0x14>
 2d0:	a0 5d       	subi	r26, 0xD0	; 208
 2d2:	aa 33       	cpi	r26, 0x3A	; 58
 2d4:	08 f0       	brcs	.+2      	; 0x2d8 <__ultoa_common+0x32>
 2d6:	a9 5d       	subi	r26, 0xD9	; 217
 2d8:	a1 93       	st	Z+, r26
 2da:	36 f7       	brtc	.-52     	; 0x2a8 <__ultoa_common+0x2>
 2dc:	b1 11       	cpse	r27, r1
 2de:	b1 93       	st	Z+, r27
 2e0:	10 82       	st	Z, r1
 2e2:	ca 01       	movw	r24, r20
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <strrev>

000002e6 <strrev>:
 2e6:	dc 01       	movw	r26, r24
 2e8:	fc 01       	movw	r30, r24
 2ea:	67 2f       	mov	r22, r23
 2ec:	71 91       	ld	r23, Z+
 2ee:	77 23       	and	r23, r23
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <strrev+0x4>
 2f2:	32 97       	sbiw	r30, 0x02	; 2
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <strrev+0x18>
 2f6:	7c 91       	ld	r23, X
 2f8:	6d 93       	st	X+, r22
 2fa:	70 83       	st	Z, r23
 2fc:	62 91       	ld	r22, -Z
 2fe:	ae 17       	cp	r26, r30
 300:	bf 07       	cpc	r27, r31
 302:	c8 f3       	brcs	.-14     	; 0x2f6 <strrev+0x10>
 304:	08 95       	ret

00000306 <_exit>:
 306:	f8 94       	cli

00000308 <__stop_program>:
 308:	ff cf       	rjmp	.-2      	; 0x308 <__stop_program>
